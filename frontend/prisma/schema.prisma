generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  name                   String          @unique
  avatarImageUrl         String
  nickname               String          @unique
  isTwoFactorAuthEnabled Boolean         @default(false)
  twoFactorAuthSecret    String?
  onlineStatus           OnlineStatus    @default(ONLINE)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  blocking               Block[]         @relation("source")
  blockedBy              Block[]         @relation("target")
  creator                FriendRequest[] @relation("creator")
  receiver               FriendRequest[] @relation("receiver")
  playerOne              MatchResult[]   @relation("playerOne")
  playerTwo              MatchResult[]   @relation("playerTwo")
}

model FriendRequest {
  creatorId  String
  receiverId String
  status     FriendRequestStatus
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  creator    User                @relation("creator", fields: [creatorId], references: [id])
  receiver   User                @relation("receiver", fields: [receiverId], references: [id])

  @@id([creatorId, receiverId])
}

model Block {
  sourceId String
  targetId String
  source   User   @relation("source", fields: [sourceId], references: [id])
  target   User   @relation("target", fields: [targetId], references: [id])

  @@id([sourceId, targetId])
}

model MatchResult {
  id            String   @id @default(uuid())
  playerOneId   String
  playerTwoId   String
  startedAt     DateTime @default(now())
  finishedAt    DateTime @updatedAt
  opponentScore Int
  userScore     Int
  win           Boolean
  playerOne     User     @relation("playerOne", fields: [playerOneId], references: [id])
  playerTwo     User     @relation("playerTwo", fields: [playerTwoId], references: [id])
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
