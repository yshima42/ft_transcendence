generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  sourceId                  String @db.Uuid
  targetId                  String @db.Uuid
  User_Block_sourceIdToUser User   @relation("Block_sourceIdToUser", fields: [sourceId], references: [id], onDelete: Cascade)
  User_Block_targetIdToUser User   @relation("Block_targetIdToUser", fields: [targetId], references: [id], onDelete: Cascade)

  @@id([sourceId, targetId])
}

model ChatMessage {
  id         String   @id @db.Uuid
  content    String
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  chatRoomId String   @db.Uuid
  senderId   String   @db.Uuid
  ChatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id             String           @id @db.Uuid
  name           String           @unique
  roomStatus     ChatRoomStatus   @default(PUBLIC)
  password       String?
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @db.Timestamptz(3)
  ChatMessage    ChatMessage[]
  ChatRoomMember ChatRoomMember[]
}

model ChatRoomMember {
  chatRoomId   String               @db.Uuid
  userId       String               @db.Uuid
  memberStatus ChatRoomMemberStatus @default(NORMAL)
  statusUntil  DateTime?            @db.Timestamptz(3)
  ChatRoom     ChatRoom             @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  User         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatRoomId, userId])
}

model Dm {
  id        String   @id @db.Uuid
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  dmRoomId  String   @db.Uuid
  senderId  String   @db.Uuid
  DmRoom    DmRoom   @relation(fields: [dmRoomId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model DmRoom {
  id           String         @id @db.Uuid
  createdAt    DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime       @db.Timestamptz(3)
  Dm           Dm[]
  DmRoomMember DmRoomMember[]
}

model DmRoomMember {
  dmRoomId String @db.Uuid
  userId   String @db.Uuid
  DmRoom   DmRoom @relation(fields: [dmRoomId], references: [id], onDelete: Cascade)
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([dmRoomId, userId])
}

model FriendRequest {
  creatorId                           String              @db.Uuid
  receiverId                          String              @db.Uuid
  status                              FriendRequestStatus
  createdAt                           DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt                           DateTime            @db.Timestamptz(3)
  User_FriendRequest_creatorIdToUser  User                @relation("FriendRequest_creatorIdToUser", fields: [creatorId], references: [id])
  User_FriendRequest_receiverIdToUser User                @relation("FriendRequest_receiverIdToUser", fields: [receiverId], references: [id])

  @@id([creatorId, receiverId])
}

model MatchResult {
  id                                 String   @id @db.Uuid
  playerOneId                        String   @db.Uuid
  playerTwoId                        String   @db.Uuid
  playerOneScore                     Int
  playerTwoScore                     Int
  finishedAt                         DateTime @default(now()) @db.Timestamptz(3)
  User_MatchResult_playerOneIdToUser User     @relation("MatchResult_playerOneIdToUser", fields: [playerOneId], references: [id], onDelete: Cascade)
  User_MatchResult_playerTwoIdToUser User     @relation("MatchResult_playerTwoIdToUser", fields: [playerTwoId], references: [id], onDelete: Cascade)
}

model User {
  id                                           String               @id @db.Uuid
  name                                         String               @unique
  avatarImageUrl                               String
  nickname                                     String               @unique
  onlineStatus                                 OnlineStatus         @default(ONLINE)
  createdAt                                    DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt                                    DateTime             @db.Timestamptz(3)
  Block_Block_sourceIdToUser                   Block[]              @relation("Block_sourceIdToUser")
  Block_Block_targetIdToUser                   Block[]              @relation("Block_targetIdToUser")
  ChatMessage                                  ChatMessage[]
  ChatRoomMember                               ChatRoomMember[]
  Dm                                           Dm[]
  DmRoomMember                                 DmRoomMember[]
  FriendRequest_FriendRequest_creatorIdToUser  FriendRequest[]      @relation("FriendRequest_creatorIdToUser")
  FriendRequest_FriendRequest_receiverIdToUser FriendRequest[]      @relation("FriendRequest_receiverIdToUser")
  MatchResult_MatchResult_playerOneIdToUser    MatchResult[]        @relation("MatchResult_playerOneIdToUser")
  MatchResult_MatchResult_playerTwoIdToUser    MatchResult[]        @relation("MatchResult_playerTwoIdToUser")
  OneTimePasswordAuth                          OneTimePasswordAuth?
}

model OneTimePasswordAuth {
  authUserId String   @id @db.Uuid
  isEnabled  Boolean  @default(false)
  qrcodeUrl  String?
  secret     String?
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  User       User     @relation(fields: [authUserId], references: [id])
}

enum ChatRoomMemberStatus {
  ADMIN
  MODERATOR
  NORMAL
  KICKED
  BANNED
  MUTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}

enum ChatRoomStatus {
  PUBLIC
  PRIVATE
  PROTECTED
}
