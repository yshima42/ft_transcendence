generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  sourceId                  String
  targetId                  String
  User_Block_sourceIdToUser User   @relation("Block_sourceIdToUser", fields: [sourceId], references: [id])
  User_Block_targetIdToUser User   @relation("Block_targetIdToUser", fields: [targetId], references: [id])

  @@id([sourceId, targetId])
}

model ChatMessage {
  id         String   @id
  content    String
  createdAt  DateTime @default(now())
  chatRoomId String
  senderId   String
  ChatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  User       User     @relation(fields: [senderId], references: [id])
}

model ChatRoom {
  id           String         @id
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ChatMessage  ChatMessage[]
  ChatRoomUser ChatRoomUser[]
}

model ChatRoomUser {
  chatRoomId String
  userId     String
  status     ChatUserStatus
  ChatRoom   ChatRoom       @relation(fields: [chatRoomId], references: [id])
  User       User           @relation(fields: [userId], references: [id])

  @@id([chatRoomId, userId])
}

model Dm {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  dmRoomId  String
  senderId  String
  DmRoom    DmRoom   @relation(fields: [dmRoomId], references: [id])
  User      User     @relation(fields: [senderId], references: [id])
}

model DmRoom {
  id         String       @id
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  Dm         Dm[]
  DmRoomUser DmRoomUser[]
}

model DmRoomUser {
  dmRoomId String
  userId   String
  DmRoom   DmRoom @relation(fields: [dmRoomId], references: [id])
  User     User   @relation(fields: [userId], references: [id])

  @@id([dmRoomId, userId])
}

model FriendRequest {
  creatorId                           String
  receiverId                          String
  status                              FriendRequestStatus
  createdAt                           DateTime            @default(now())
  updatedAt                           DateTime
  User_FriendRequest_creatorIdToUser  User                @relation("FriendRequest_creatorIdToUser", fields: [creatorId], references: [id])
  User_FriendRequest_receiverIdToUser User                @relation("FriendRequest_receiverIdToUser", fields: [receiverId], references: [id])

  @@id([creatorId, receiverId])
}

model MatchResult {
  id                                 String   @id
  playerOneId                        String
  playerTwoId                        String
  playerOneScore                     Int
  playerTwoScore                     Int
  startedAt                          DateTime @default(now())
  finishedAt                         DateTime
  User_MatchResult_playerOneIdToUser User     @relation("MatchResult_playerOneIdToUser", fields: [playerOneId], references: [id])
  User_MatchResult_playerTwoIdToUser User     @relation("MatchResult_playerTwoIdToUser", fields: [playerTwoId], references: [id])
}

model TwoFactorAuth {
  authUserId String   @unique
  url        String
  secret     String
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [authUserId], references: [id])
}

model User {
  id                                           String          @id
  name                                         String          @unique
  avatarImageUrl                               String
  nickname                                     String          @unique
  onlineStatus                                 OnlineStatus    @default(ONLINE)
  createdAt                                    DateTime        @default(now())
  updatedAt                                    DateTime
  Block_Block_sourceIdToUser                   Block[]         @relation("Block_sourceIdToUser")
  Block_Block_targetIdToUser                   Block[]         @relation("Block_targetIdToUser")
  ChatMessage                                  ChatMessage[]
  ChatRoomUser                                 ChatRoomUser[]
  Dm                                           Dm[]
  DmRoomUser                                   DmRoomUser[]
  FriendRequest_FriendRequest_creatorIdToUser  FriendRequest[] @relation("FriendRequest_creatorIdToUser")
  FriendRequest_FriendRequest_receiverIdToUser FriendRequest[] @relation("FriendRequest_receiverIdToUser")
  MatchResult_MatchResult_playerOneIdToUser    MatchResult[]   @relation("MatchResult_playerOneIdToUser")
  MatchResult_MatchResult_playerTwoIdToUser    MatchResult[]   @relation("MatchResult_playerTwoIdToUser")
  TwoFactorAuth                                TwoFactorAuth?
}

enum ChatUserStatus {
  OWNER
  MEMBER
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}
