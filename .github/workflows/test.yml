
name: build

on:
  pull_request_target:
    types: [labeled]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: backend install
        run: yarn --cwd backend install --production=true
      - name: backend build
        run: yarn --cwd backend build
      - name: frontend install
        run: yarn --cwd frontend install
      - name: frontend build
        run: yarn --cwd frontend build

  test:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'safe to test')
    steps:
      - uses: actions/checkout@v3
      - name: create .env
        run: |
          echo "JWT_SECRET='${JWT_SECRET}'" > backend/.env
          echo "DATABASE_URL='${DATABASE_URL}'" >> backend/.env
          echo "FT_CID='${FT_CID}'" >> backend/.env
          echo "FT_SECRET='${FT_SECRET}'" >> backend/.env
          echo "TWO_FACTOR_AUTHENTICATION_APP_NAME='${TWO_FACTOR_AUTH_APP_NAME}'" >> backend/.env
          echo "FT_SECRET='${FT_SECRET}'" >> backend/.env
          echo "FRONTEND_URL='${FRONTEND_URL}'" >> backend/.env
          echo "BACKEND_URL='${BACKEND_URL}'" >> backend/.env
          echo "VITE_APP_TITLE='${VITE_APP_TITLE}'" > frontend/.env
          echo "VITE_API_URL='${VITE_API_URL}'" >> frontend/.env
          echo "DATABASE_URL='${DATABASE_URL}'" >> frontend/.env
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: "postgresql://udemy:udemy@localhost:5434/udemy?schema=public"
          FT_CID: ${{ secrets.FT_CID }}
          FT_SECRET: ${{ secrets.FT_SECRET }}
          TWO_FACTOR_AUTH_APP_NAME: "TransPong"
          VITE_APP_TITLE: "My Super Awsome APP"
          VITE_API_URL: "http://localhost:3000"
          FRONTEND_URL: "http://localhost:5173"
          BACKEND_URL: "http://localhost:3000"
      - name: docker-compose up
        run: docker-compose -f backend/docker-compose.yml up -d
      - name: backend install
        run: yarn --cwd backend install
      - name: backend prisma generate
        run: yarn --cwd backend prisma generate
      - name: backend prisma migrate
        run: yarn --cwd backend prisma migrate dev --name init
      - name: backend test
        run: yarn --cwd backend test
      - name: frontend install
        run: yarn --cwd frontend install
      - name: frontend prisma db pull
        run: yarn --cwd frontend prisma db pull
      - name: frontend prisma generate
        run: yarn --cwd frontend prisma generate
      - name: frontend test
        run: yarn --cwd frontend start-server-and-test api 3000/api dev 5173 'cypress run'
