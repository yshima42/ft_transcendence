// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  name            String          @unique
  avatarUrl       String
  nickname        String          @unique @default("")
  onlineStatus    OnlineStatus    @default(ONLINE)
  following       Relationship[]  @relation("following")
  followedBy      Relationship[]  @relation("followedBy")
  creator         FriendRequest[] @relation("creator")
  receiver        FriendRequest[] @relation("receiver")
  blocking        Block[]         @relation("blocking")
  blockedBy       Block[]         @relation("blockedBy")
  matchedUser     MatchResult[]   @relation("matchedUser")
  matchedOpponent MatchResult[]   @relation("matchedOpponent")
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}

model Relationship {
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  user       User             @relation("following", fields: [userId], references: [id])
  userId     String
  peer       User             @relation("followedBy", fields: [peerId], references: [id])
  peerId     String
  type       RelationshipType
  isBlocking Boolean          @default(false)

  @@id([userId, peerId])
}

enum RelationshipType {
  FRIEND
  INCOMING
  OUTGOING
  NONE
}

model FriendRequest {
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  creator    User                @relation("creator", fields: [creatorId], references: [id])
  creatorId  String
  receiver   User                @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
  status     FriendRequestStatus

  @@id([creatorId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Block {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blocking    User     @relation("blocking", fields: [blockingId], references: [id])
  blockingId  String
  blockedBy   User     @relation("blockedBy", fields: [blockedById], references: [id])
  blockedById String

  @@id([blockingId, blockedById])
}

model MatchResult {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("matchedUser", fields: [userId], references: [id])
  userId        String
  opponent      User     @relation("matchedOpponent", fields: [opponentId], references: [id])
  opponentId    String
  userScore     Int
  opponentScore Int
  win           Boolean
}

// model Game {
//   id String @id @default(uuid())
//   createdAt     DateTime @default(now())
//   winnter User @relation("matchedUser", fields: [winnerId], references: [id])
//   winnerId String
//   loser      User     @relation("matchedOpponent", fields: [loserId], references: [id])
//   loserId String
// }
