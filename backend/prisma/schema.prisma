// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 使用するときのみコメントアウトを外してください。
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./erd.md"
// }

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
// }

// generator class_validator {
//   provider = "prisma-class-validator-generator"
// }

model User {
  id             String       @id @default(uuid()) @db.Uuid
  name           String       @unique
  avatarImageUrl String
  nickname       String       @unique
  onlineStatus   OnlineStatus @default(ONLINE)
  createdAt      DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(3)

  oneTimePasswordAuth OneTimePasswordAuth?
  creator             FriendRequest[]      @relation("creator")
  receiver            FriendRequest[]      @relation("receiver")
  blocking            Block[]              @relation("source")
  blockedBy           Block[]              @relation("target")
  playerOne           MatchResult[]        @relation("playerOne")
  playerTwo           MatchResult[]        @relation("playerTwo")

  chatMessages   ChatMessage[]    @relation("messageSender") // ユーザーが送信したチャットメッセージ
  dms            Dm[]             @relation("dmSender") // ユーザーが送信したDMメッセージ
  ChatRoomMember ChatRoomMember[] // ユーザーが参加しているチャットルーム
  DmRoomMember   DmRoomMember[] // ユーザーが参加しているDMルーム
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}

model OneTimePasswordAuth {
  authUser   User     @relation(fields: [authUserId], references: [id])
  authUserId String   @id @db.Uuid
  isEnabled  Boolean  @default(false)
  qrcodeUrl  String?
  secret     String?
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
}

model FriendRequest {
  creator    User                @relation("creator", fields: [creatorId], references: [id])
  creatorId  String              @db.Uuid
  receiver   User                @relation("receiver", fields: [receiverId], references: [id])
  receiverId String              @db.Uuid
  status     FriendRequestStatus
  createdAt  DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime            @updatedAt @db.Timestamptz(3)

  @@id([creatorId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
}

model Block {
  source   User   @relation("source", fields: [sourceId], references: [id])
  sourceId String @db.Uuid
  target   User   @relation("target", fields: [targetId], references: [id])
  targetId String @db.Uuid

  @@id([sourceId, targetId])
}

model MatchResult {
  id             String   @id @default(uuid()) @db.Uuid
  playerOne      User     @relation("playerOne", fields: [playerOneId], references: [id])
  playerOneId    String   @db.Uuid
  playerTwo      User     @relation("playerTwo", fields: [playerTwoId], references: [id])
  playerTwoId    String   @db.Uuid
  playerOneScore Int
  playerTwoScore Int
  finishedAt     DateTime @default(now()) @db.Timestamptz(3)
}

model ChatMessage {
  id         String   @id @default(uuid()) @db.Uuid
  content    String
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade) // 属するチャットルーム
  chatRoomId String   @db.Uuid
  sender     User     @relation("messageSender", fields: [senderId], references: [id], onDelete: Cascade) // 送信者
  senderId   String   @db.Uuid
}

model ChatRoom {
  id              String           @id @default(uuid()) @db.Uuid
  name            String           @unique
  roomStatus      ChatRoomStatus   @default(PUBLIC)
  password        String?
  createdAt       DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(3)
  chatMessages    ChatMessage[]
  chatRoomMembers ChatRoomMember[] // チャットルームに属するユーザー
}

model ChatRoomMember {
  chatRoom     ChatRoom             @relation(fields: [chatRoomId], references: [id], onDelete: Cascade) // 参加しているチャットルーム
  chatRoomId   String               @db.Uuid
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade) // 参加しているユーザー
  userId       String               @db.Uuid
  memberStatus ChatRoomMemberStatus @default(NORMAL)
  statusUntil  DateTime?            @db.Timestamptz(3)

  @@id([chatRoomId, userId])
}

model Dm {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  dmRoom    DmRoom   @relation(fields: [dmRoomId], references: [id], onDelete: Cascade) // 属するDMルーム dmRoomIdが削除されたら、このDmも削除される
  dmRoomId  String   @db.Uuid
  sender    User     @relation("dmSender", fields: [senderId], references: [id], onDelete: Cascade) // DMに属するユーザー
  senderId  String   @db.Uuid
}

model DmRoom {
  id            String         @id @default(uuid()) @db.Uuid
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime       @updatedAt @db.Timestamptz(3)
  dms           Dm[] // DMルームに属するメッセージ
  dmRoomMembers DmRoomMember[] // チャットルームに属するユーザー
}

model DmRoomMember {
  dmRoom   DmRoom @relation(fields: [dmRoomId], references: [id], onDelete: Cascade) // 参加しているDMルーム
  dmRoomId String @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade) // DMルームの参加者
  userId   String @db.Uuid

  @@id([dmRoomId, userId])
}

enum ChatRoomMemberStatus {
  ADMIN // チャットルームのオーナー
  MODERATOR // チャットルームのサブオーナー
  NORMAL // チャットルームのメンバー
  KICKED // チャットルームからキックされた
  BANNED // チャットルームからBANされた
  MUTED // チャットルームからミュートされた
}

enum ChatRoomStatus {
  PUBLIC
  PRIVATE
  PROTECTED
}
