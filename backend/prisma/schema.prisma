// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String       @unique
  avatarUrl    String
  nickname     String       @unique @default("")
  onlineStatus OnlineStatus @default(ONLINE)

  creator         FriendRequest[] @relation("creator")
  receiver        FriendRequest[] @relation("receiver")
  blocking        Block[]         @relation("source")
  blockedBy       Block[]         @relation("target")
  matchedUser     MatchResult[]   @relation("matchedUser")
  matchedOpponent MatchResult[]   @relation("matchedOpponent")
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}

model FriendRequest {
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  creator    User                @relation("creator", fields: [creatorId], references: [id])
  creatorId  String
  receiver   User                @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
  status     FriendRequestStatus

  @@id([creatorId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Block {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  source    User     @relation("source", fields: [sourceId], references: [id])
  sourceId  String
  target    User     @relation("target", fields: [targetId], references: [id])
  targetId  String

  @@id([sourceId, targetId])
}

model MatchResult {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("matchedUser", fields: [userId], references: [id])
  userId        String
  opponent      User     @relation("matchedOpponent", fields: [opponentId], references: [id])
  opponentId    String
  userScore     Int
  opponentScore Int
  win           Boolean
}
