// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 使用するときのみコメントアウトを外してください。
generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.md"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

// generator class_validator {
//   provider = "prisma-class-validator-generator"
// }

model User {
  id             String       @id @default(uuid())
  name           String       @unique
  avatarImageUrl String
  nickname       String       @unique @default("")
  onlineStatus   OnlineStatus @default(ONLINE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  creator   FriendRequest[] @relation("creator")
  receiver  FriendRequest[] @relation("receiver")
  blocking  Block[]         @relation("source")
  blockedBy Block[]         @relation("target")
  playerOne MatchResult[]   @relation("playerOne")
  playerTwo MatchResult[]   @relation("playerTwo")

  chatMessages ChatMessage[] @relation("messageSender") // ユーザーが送信したチャットメッセージ
  ChatUser     ChatUser[] // ユーザーが参加しているチャットルーム
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}

model FriendRequest {
  creator    User                @relation("creator", fields: [creatorId], references: [id])
  creatorId  String
  receiver   User                @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
  status     FriendRequestStatus
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@id([creatorId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Block {
  source   User   @relation("source", fields: [sourceId], references: [id])
  sourceId String
  target   User   @relation("target", fields: [targetId], references: [id])
  targetId String

  @@id([sourceId, targetId])
}

model MatchResult {
  id            String   @id @default(uuid())
  playerOne     User     @relation("playerOne", fields: [playerOneId], references: [id])
  playerOneId   String
  playerTwo     User     @relation("playerTwo", fields: [playerTwoId], references: [id])
  playerTwoId   String
  userScore     Int
  opponentScore Int
  win           Boolean
  startedAt     DateTime @default(now())
  finishededAt  DateTime @updatedAt
}

model ChatMessage {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id]) // 属するチャットルーム
  chatRoomId String
  sender     User     @relation("messageSender", fields: [senderId], references: [id]) // メッセージに属するユーザー
  senderId   String
}

model ChatRoom {
  id           String        @id @default(uuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chatMessages ChatMessage[] // チャットルームに属するメッセージ
  chatUsers    ChatUser[] // チャットルームに属するユーザー
}

model ChatUser {
  chatRoom   ChatRoom       @relation(fields: [chatRoomId], references: [id]) // 参加しているチャットルーム
  chatRoomId String
  user       User           @relation(fields: [userId], references: [id]) // チャットの参加者
  userId     String
  status     ChatUserStatus // チャットの参加者のステータス

  @@id([chatRoomId, userId])
}

enum ChatUserStatus {
  OWNER
  MEMBER
}
